{"version":3,"sources":["youtube.js"],"names":["videos","tag","document","createElement","src","firstScriptTag","getElementsByTagName","parentNode","insertBefore","players","onYouTubeIframeAPIReady","map","video","index","YT","Player","videoId","events","onReady","onPlayerReady","onStateChange","onPlayerStateChange","event","data","PlayerState","UNSTARTED","PLAYING","$","target","a","parents","addClass","PAUSED","ENDED","CUED","removeClass","click","id","this","stopVideo","playVideo"],"mappings":"aAAA,IAAMA,OAAS,CAAC,GAAI,cAAe,cAAe,cAAe,eAE7DC,IAAMC,SAASC,cAAc,UAEjCF,IAAIG,IAAM,qCACV,IAAIC,eAAiBH,SAASI,qBAAqB,UAAU,GAC7DD,eAAeE,WAAWC,aAAaP,IAAKI,gBAI5C,IAAII,QAAU,GACd,SAASC,0BACPV,OAAOW,IAAI,SAACC,EAAOC,GACjBJ,QAAQI,GAAS,IAAIC,GAAGC,OAAO,UAAYF,EAAO,CAChDG,QAASJ,EACTK,OAAQ,CACNC,QAAWC,cACXC,cAAiBC,yBAOzB,SAASF,cAAcG,IAOvB,SAASD,oBAAoBC,GACvBA,EAAMC,MAAQT,GAAGU,YAAYC,WAAaH,EAAMC,MAAQT,GAAGU,YAAYE,UACzEC,EAAEL,EAAMM,OAAOC,GAAGC,QAAQ,UAAUC,SAAS,QAC7CJ,EAAE,QAAQI,SAAS,eAEjBT,EAAMC,MAAQT,GAAGU,YAAYQ,QAAUV,EAAMC,MAAQT,GAAGU,YAAYS,OAAUX,EAAMC,MAAQT,GAAGU,YAAYU,OAC7GP,EAAEL,EAAMM,OAAOC,GAAGC,QAAQ,UAAUK,YAAY,QAChDR,EAAE,QAAQQ,YAAY,eAG1BR,EAAE,UAAUS,MAAM,WAChB,IACMC,EADOV,EAAEW,MAAMR,QAAQ,UACXP,KAAK,MACvBd,QAAQ4B,GAAIE,cAEdZ,EAAE,qBAAqBS,MAAM,WAC3B,IACMC,EADOV,EAAEW,MAAMR,QAAQ,UACXP,KAAK,MACvBd,QAAQ4B,GAAIG","file":"scripts.min.js","sourcesContent":["const videos = ['', 'TZipNpBCmzI', 'TZipNpBCmzI', 'TZipNpBCmzI', 'TZipNpBCmzI'];\r\n// 2. This code loads the IFrame Player API code asynchronously.\r\nvar tag = document.createElement('script');\r\n\r\ntag.src = \"https://www.youtube.com/iframe_api\";\r\nvar firstScriptTag = document.getElementsByTagName('script')[0];\r\nfirstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\r\n\r\n// 3. This function creates an <iframe> (and YouTube player)\r\n//    after the API code downloads.\r\nvar players = [];\r\nfunction onYouTubeIframeAPIReady() {\r\n  videos.map((video, index) => {\r\n    players[index] = new YT.Player('player-' + index, {\r\n      videoId: video,\r\n      events: {\r\n        'onReady': onPlayerReady,\r\n        'onStateChange': onPlayerStateChange\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\n// 4. The API will call this function when the video player is ready.\r\nfunction onPlayerReady(event) {\r\n  \r\n}\r\n\r\n// 5. The API calls this function when the player's state changes.\r\n//    The function indicates that when playing a video (state=1),\r\n//    the player should play for six seconds and then stop.\r\nfunction onPlayerStateChange(event) {\r\n  if (event.data == YT.PlayerState.UNSTARTED || event.data == YT.PlayerState.PLAYING) {\r\n    $(event.target.a).parents('.video').addClass('play');\r\n    $('body').addClass('video-play');\r\n  }\r\n  if (event.data == YT.PlayerState.PAUSED || event.data == YT.PlayerState.ENDED  || event.data == YT.PlayerState.CUED) {\r\n    $(event.target.a).parents('.video').removeClass('play');\r\n    $('body').removeClass('video-play');\r\n  }\r\n}\r\n$('.close').click(function() {\r\n  let parent = $(this).parents('.video');\r\n  const id = parent.data('id');\r\n  players[id].stopVideo();\r\n})\r\n$('.video .text-wrap').click(function() {\r\n  let parent = $(this).parents('.video');\r\n  const id = parent.data('id');\r\n  players[id].playVideo();\r\n})\r\n"]}